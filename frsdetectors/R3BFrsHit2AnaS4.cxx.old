// ----------------------------------------------------------------------
// -----         R3BFrsHit2AnaS4 source file                        -----
// -----             Created 29/07/18  by J.L. Rodriguez-Sanchez    -----
// ----------------------------------------------------------------------

//ROOT headers
#include "TClonesArray.h"
#include "TMath.h"
#include "TRandom.h"
#include "TF1.h"

//Fair headers
#include "FairRootManager.h"
#include "FairRunAna.h"
#include "FairRuntimeDb.h"
#include "FairLogger.h"

#include <iomanip>

//FRS headers
#include "R3BFrsMappedData.h"
#include "R3BMusicHitData.h"
#include "R3BTpcHitData.h"
#include "R3BFrsHit2AnaS4.h"
#include "R3BFrsData.h"


Double_t const c = 299792458.0;      //Light velocity
Double_t const e = 1.60217662e-19;   //Electron charge
Double_t const u = 1.660538921e-27;  //Atomic mass unit

 //int event=0;

//R3BFrsHit2AnaS4: Default Constructor --------------------------
R3BFrsHit2AnaS4::R3BFrsHit2AnaS4() : 
  FairTask("R3B TPC Hit-Calibrator",1),
  fMagS2S4(0),
  fDispS2S4(0),
  fPathS2S4(0),
  fTOFS2S4(0),
  fDisTpcS2(0), 
  fDisTpcS4(0),
  fNbRhos(4),
  fNbBfiels(4),
  fRhos(NULL),
  fBfields(NULL),
  fFrsMappedDataCA(NULL),
  fTpcHitDataCA(NULL),
  fMusicHitDataCA(NULL),
  fFrsDataCA(NULL)
{
}

//R3BFrsHit2AnaS4Par: Standard Constructor --------------------------
R3BFrsHit2AnaS4::R3BFrsHit2AnaS4(const char* name, Int_t iVerbose) :
  FairTask(name, iVerbose),
  fMagS2S4(0),
  fDispS2S4(0),
  fPathS2S4(0),
  fTOFS2S4(0),
  fDisTpcS2(0), 
  fDisTpcS4(0),
  fNbRhos(4),
  fNbBfiels(4),
  fRhos(NULL),
  fBfields(NULL),
  fFrsMappedDataCA(NULL),
  fTpcHitDataCA(NULL),
  fMusicHitDataCA(NULL),
  fFrsDataCA(NULL)
{  
}

//Virtual R3BFrsHit2AnaS4: Destructor
R3BFrsHit2AnaS4::~R3BFrsHit2AnaS4()
{
  LOG(INFO) << "R3BFrsHit2AnaS4: Delete instance" << FairLogger::endl;
}

/*
void R3BFrsHit2AnaS4::SetParContainers() {
  
  //Parameter Container
  //Reading musicCalPar from FairRuntimeDb
  FairRuntimeDb* rtdb = FairRuntimeDb::instance();
  if (!rtdb) { 
    LOG(ERROR)<<"FairRuntimeDb not opened!"<<FairLogger::endl;
  }
  
  fCal_Par=(R3BMusicHitPar*)rtdb->getContainer("musicHitPar");
  if (!fCal_Par) {
    LOG(ERROR)<<"R3BFrsHit2AnaS4Par::Init() Couldn't get handle on musicCalPar container"<<FairLogger::endl;
  }
  else{
    LOG(INFO)<<"R3BFrsHit2AnaS4Par:: musicCalPar container open"<<FairLogger::endl;
  }
}
*/

void R3BFrsHit2AnaS4::SetParameter(){

  frho_S0_S2 = 0.5*(fRhos->GetAt(0)+fRhos->GetAt(1));
  fBfield_S0_S2 = 0.5*(fBfields->GetAt(0)+fBfields->GetAt(1));

  frho_S2_S4 = 0.5*(fRhos->GetAt(2)+fRhos->GetAt(3));
  fBfield_S2_S4 = 0.5*(fBfields->GetAt(2)+fBfields->GetAt(3));

  LOG(INFO)<<"R3BFrsHit2AnaS4: Rho (S0-S2): "<< frho_S0_S2 <<FairLogger::endl;
  LOG(INFO)<<"R3BFrsHit2AnaS4: B (S0-S2): "<< fBfield_S0_S2 <<FairLogger::endl;
  LOG(INFO)<<"R3BFrsHit2AnaS4: Rho (S2-S4): "<< frho_S2_S4 <<FairLogger::endl;
  LOG(INFO)<<"R3BFrsHit2AnaS4: B (S2-S4): "<< fBfield_S2_S4 <<FairLogger::endl;


  /*
  //--- Parameter Container ---
  NumDets=fCal_Par->GetNumDets();//Number of Detectors
  NumParams=fCal_Par->GetNumParametersFit();//Number of Parameters

  LOG(INFO)<<"R3BFrsHit2AnaS4: Nb detectors: "<< NumDets <<FairLogger::endl;
  LOG(INFO)<<"R3BFrsHit2AnaS4: Nb parameters from pedestal fit: "<< NumParams <<FairLogger::endl;
  
  CalParams= new TArrayF();
  Int_t array_size = NumDets*NumParams;
  CalParams->Set(array_size);	
  CalParams=fCal_Par->GetDetectorHitParams();//Array with the Cal parameters

  //Parameters detector
  for(Int_t d = 0; d < NumDets; d++){
  LOG(INFO)<<"R3BFrsHit2AnaS4 Nb detector: " <<d+1<< " Params "<< CalParams->GetAt(d*NumParams) <<" : "<< CalParams->GetAt(d*NumParams+1) <<FairLogger::endl;
  }
*/

}


// -----   Public method Init   --------------------------------------------
InitStatus R3BFrsHit2AnaS4::Init()
{
  LOG(INFO) << "R3BFrsHit2AnaS4: Init FRS analysis from S2 to S4" << FairLogger::endl;

  //INPUT DATA
  FairRootManager* rootManager = FairRootManager::Instance();
  if (!rootManager) { return kFATAL;}

  fFrsMappedDataCA = (TClonesArray*)rootManager->GetObject("FrsMappedData");
  if (!fFrsMappedDataCA) { return kFATAL;}
  
  fTpcHitDataCA = (TClonesArray*)rootManager->GetObject("TpcHitData");
  if (!fTpcHitDataCA) { return kFATAL;}

  fMusicHitDataCA = (TClonesArray*)rootManager->GetObject("MusicHitData");
  if (!fMusicHitDataCA) { return kFATAL;}
   
  //OUTPUT DATA
  //data
  fFrsDataCA = new TClonesArray("R3BFrsData",10);
  rootManager->Register("FrsData", "Analysis FRS", fFrsDataCA, kTRUE);
  

      fitXposS2_S4 = new TF1("f1", "pol4", -200, 200);
      fitXposS2_S4->SetParameter(0,2.50005);      
      fitXposS2_S4->SetParameter(1,-8.42716e-05);
      fitXposS2_S4->SetParameter(2,-3.79646e-06);      
      fitXposS2_S4->SetParameter(3,-3.44459e-08);
      fitXposS2_S4->SetParameter(4,-1.31254e-10);


      fitXposS2_S4b = new TF1("f1", "pol4", -200, 200);
      fitXposS2_S4b->SetParameter(0,2.52238);      
      fitXposS2_S4b->SetParameter(1,8.18338e-05);
      fitXposS2_S4b->SetParameter(2,3.29322e-06);      
      fitXposS2_S4b->SetParameter(3,-2.9259e-08);
      fitXposS2_S4b->SetParameter(4,-8.32297e-10);



      fitAoQ_ToF = new TF1("f1", "pol1", 100, 200);
      fitAoQ_ToF->SetParameter(0,2.75048);      
      fitAoQ_ToF->SetParameter(1,-0.00168378);


  SetParameter();
  return kSUCCESS;
}

// -----   Public method ReInit   ----------------------------------------------
InitStatus R3BFrsHit2AnaS4::ReInit()
{
  //SetParContainers();
  return kSUCCESS;
}

// -----   Public method Execution   --------------------------------------------
void R3BFrsHit2AnaS4::Exec(Option_t* option)
{
  
  //if(++nEvents % 10000 == 0)
  //LOG(INFO) << nEvents << FairLogger::endl;
  
  //Reset entries in output arrays, local arrays
  Reset();
  
  Double_t fZ=0., fAq=0.;
 
  Int_t nHitFrs= fFrsMappedDataCA->GetEntries();
  Int_t nHitMusic= fMusicHitDataCA->GetEntries();
  Int_t nHitTpc = fTpcHitDataCA->GetEntries();
  //LOG(INFO) << nHitMusic << " " << nHitTpc << FairLogger::endl;
  if(!nHitMusic || !nHitFrs || nHitTpc<4) return;//FIXME:include here warning!

  R3BFrsMappedData** MapFrs = new R3BFrsMappedData*[nHitFrs];
  R3BMusicHitData** HitMusic = new R3BMusicHitData*[nHitMusic];  
  R3BTpcHitData** HitTpc = new R3BTpcHitData*[nHitTpc];

  //Z from musics ------------------------------------
  Double_t countz=0;
  for(Int_t i = 0; i < nHitMusic; i++) {
    HitMusic[i] = (R3BMusicHitData*)(fMusicHitDataCA->At(i));
    if(HitMusic[i]->GetZ()>1){
      fZ = fZ + HitMusic[i]->GetZ();
      countz++;
    }
  }
  if(countz>0){
   fZ=fZ/countz;
  }else{
   fZ=0.;
  }

  //Positions from TPCs ------------------------------
  Double_t tpc_x[4];
  Int_t detID=0;
  for(Int_t i = 0; i < nHitTpc; i++) {
    HitTpc[i] = (R3BTpcHitData*)(fTpcHitDataCA->At(i));
    detID = HitTpc[i]->GetDetectorId();
    tpc_x[detID]=HitTpc[i]->GetX();
  }

			//Focal Position S2
                       // angle_alpha_bt_S2_rad = (x0_position_TPC2 -x0_position_TPC1)/ dist_TPC2_TPC1*1000; 
		//	x_position_focal_S2 = x0_position_TPC2 + (1600)*tan(angle_alpha_bt_S2_rad/1000);

  Int_t SCI24_TofRR=0.;
  Int_t SCI24_TofLL=0.;

  for(Int_t i = 0; i < nHitFrs; i++) {
    MapFrs[i] = (R3BFrsMappedData*)(fFrsMappedDataCA->At(i));
    SCI24_TofRR=MapFrs[i]->GetSCI41RT();
    SCI24_TofLL=MapFrs[i]->GetSCI41LT();
//LOG(INFO) << SCI24_TofRR << " " << SCI24_TofLL << FairLogger::endl;
  }


  double angle_S2_mrad = (tpc_x[1] - tpc_x[0])/ fDisTpcS2*1000.; 
  double x_position_focal_S2 = (tpc_x[1] + (1600.)*tan(angle_S2_mrad/1000.));
                       
  //FOCAL POSITION S4
  double angle_S4_mrad = (tpc_x[3] - tpc_x[2])/ fDisTpcS4*1000.;
  Float_t p0_focal = 3953.69; 
  Float_t p1_focal = 0.;//-17.9436;
  double dist_focal = p0_focal + p1_focal*(tpc_x[2]);
  double x_position_focal_S4 = tpc_x[2] + (dist_focal)*tan(angle_S4_mrad/1000.);


  //if(event==200)std::cout << tpc_x[3] << " " << tpc_x[2] << " " << x_position_focal_S2 << " " << tpc_x[0] << " " << tpc_x[1] << std::endl;


  //Velocity S2-S4
  double TAC_CAL_SC24_LL=-0.01045;
  double TAC_CAL_SC24_RR=-0.01095;
  double ToF_star_S2_S4 =0.5*(TAC_CAL_SC24_LL*SCI24_TofLL + TAC_CAL_SC24_RR*SCI24_TofRR);
  double Beta_S2_S4 = ((fPathS2S4/( fTOFS2S4 +ToF_star_S2_S4))*pow(10.,7))/c;
  double Gamma_S2_S4 =1./(sqrt(1.-(Beta_S2_S4)*(Beta_S2_S4)));

  double Brho_S4 = fBfield_S2_S4 * frho_S2_S4 * (1.-(((x_position_focal_S4/1000.) - fMagS2S4*(x_position_focal_S2/1000.))/fDispS2S4));

  //if(event==200)std::cout << Brho_S4 << " " << fBfield_S2_S4 << " " << frho_S2_S4 << " " << x_position_focal_S4 << " " << dist_focal << std::endl;



  double mean_ToF_S4 = 2.5219;

  double ToF_S2_S4 = fTOFS2S4 - (-1)*ToF_star_S2_S4;

  double AoQ_S4_slope_correlation = fitAoQ_ToF->Eval(ToF_S2_S4);
  double ToF_S2_S4_correction = mean_ToF_S4 / (AoQ_S4_slope_correlation);
  double ToF_S2_S4_corrected =ToF_S2_S4_correction*ToF_S2_S4;



  //Beta_S2_S4 = (((fPathS2S4)/(ToF_S2_S4_corrected))*pow(10.,7))/c;
  //Gamma_S2_S4 =1./(sqrt(1.-(Beta_S2_S4)*(Beta_S2_S4)));

  fAq = (Brho_S4*e)/(Gamma_S2_S4*Beta_S2_S4*c*u);

 // double AoQ_S4_rotated =((angle_S4_mrad*3.1415)/180. - 0.00629197)*sin(-0.0107632*8.0) + (fAq - 2.37044)*cos(-0.0107632*8.0) + 2.37044;

    double correction_rot = 0.027;

//0.606108 2.50275 0.00294834

    //double AoQ_S4_rotated = (fAq-2.502)*cos(-0.00262217)+(angle_S4_mrad-0.6077)*sin(-0.00262217) + 2.502+correction_rot;

    fAq = (fAq-2.50275)*cos(-0.00294834)+(angle_S4_mrad-0.606108)*sin(-0.00294834) + 2.50275+correction_rot;

    //double AoQ_S4_rotated = (fAq-2.505)*cos(-0.00655144)+(angle_S4_mrad-7.55)*sin(-0.00655144) + 2.505;
	


  //if(event==200)std::cout << fAq << " " << ToF_S2_S4_corrected << " " << ToF_S2_S4 << " " << Beta_S2_S4 << " " << Brho_S4 << std::endl;

  double XS2_slope_correction;
  double XS2_correction;

  if(x_position_focal_S2 < -30.0) {
   XS2_slope_correction = fitXposS2_S4->Eval(x_position_focal_S2);
   XS2_correction = 2.49911 / (XS2_slope_correction);
  }else{
   XS2_slope_correction = fitXposS2_S4b->Eval(x_position_focal_S2);
   XS2_correction = 2.52229 / (XS2_slope_correction);
  }


  //fAq = fAq*XS2_correction;



/*

  for(Int_t i = 0; i < nHits; i++) {
    CalDat[i] = (R3BTpcCalData*)(fTpcCalDataCA->At(i));
    detId = CalDat[i]->GetDetectorId();
    secId = CalDat[i]->GetSecId();
    xyId  = CalDat[i]->GetXYId();
  }*/


 // if(fZ>49.5 && fZ<50.5)AddData(angle_S4_mrad, fAq);

  AddData(fZ, fAq);

  if(HitMusic) delete HitMusic;
  if(HitTpc) delete HitTpc;

  //event++;
  return;
}

// -----   Protected method Finish   --------------------------------------------
void R3BFrsHit2AnaS4::Finish()
{
  
}

// -----   Public method Reset   ------------------------------------------------
void R3BFrsHit2AnaS4::Reset()
{
  LOG(DEBUG) << "Clearing FrsData Structure" << FairLogger::endl;
  if(fFrsDataCA)fFrsDataCA->Clear();
}


// -----   Private method AddData  --------------------------------------------
R3BFrsData* R3BFrsHit2AnaS4::AddData(Double_t z, Double_t aq)
{
  //It fills the R3BFrsData
  TClonesArray& clref = *fFrsDataCA;
  Int_t size = clref.GetEntriesFast();
  return new(clref[size]) R3BFrsData(z,aq);
}

